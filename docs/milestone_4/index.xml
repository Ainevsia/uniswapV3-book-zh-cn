<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milestone 4. Multi-pool Swaps on Uniswap V3 Development Book</title><link>https://uniswapv3book.com/docs/milestone_4/</link><description>Recent content in Milestone 4. Multi-pool Swaps on Uniswap V3 Development Book</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://uniswapv3book.com/docs/milestone_4/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://uniswapv3book.com/docs/milestone_4/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_4/introduction/</guid><description>Multi-pool Swaps # After implementing cross-tick swaps, we&amp;rsquo;ve got really close to real Uniswap V3 swaps. One significant limitation of our implementation is that it allows only swaps within a pool–if there&amp;rsquo;s no pool for a swap of tokens, then swapping between these tokens is not possible. This is not so in Uniswap since it allows multi-pool swaps. In this chapter, we&amp;rsquo;re going to add multi-pool swaps to our implementation.</description></item><item><title>Factory Contract</title><link>https://uniswapv3book.com/docs/milestone_4/factory-contract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_4/factory-contract/</guid><description>Factory Contract # Uniswap is designed in a way that assumes many discrete Pool contracts, with each pool handling swaps of one token pair. This looks problematic when we want to swap between two tokens that don&amp;rsquo;t have a pool–is there&amp;rsquo;s no pool, no swaps are possible. However, we can still do intermediate swaps: first swap to a token that has pairs with either of the tokens and then swap this token to the target token.</description></item><item><title>Swap Path</title><link>https://uniswapv3book.com/docs/milestone_4/path/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_4/path/</guid><description>Swap Path # Let&amp;rsquo;s imagine that we have only these pools: WETH/USDC, USDC/USDT, WBTC/USDT. If we want to swap WETH for WBTC, we&amp;rsquo;ll need to make multiple swaps (WETH→USDC→USDT→WBTC) since there&amp;rsquo;s no WETH/WBTC pool. We can do this manually or we can improve our contracts to handle such chained, or multi-pool, swaps. Of course, we&amp;rsquo;ll do the latter!
When doing multi-pool swaps, we&amp;rsquo;re sending output of a previous swap to the input of the next one.</description></item><item><title>Multi-pool Swaps</title><link>https://uniswapv3book.com/docs/milestone_4/multi-pool-swaps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_4/multi-pool-swaps/</guid><description>Multi-pool Swaps # We&amp;rsquo;re now proceeding to the core of this milestone–implementing multi-pool swaps in our contracts. We won&amp;rsquo;t touch Pool contract in this milestone because it&amp;rsquo;s a core contract that should implement only core features. Multi-pool swaps is a utility feature, and we&amp;rsquo;ll implement it in Manager and Quoter contracts.
Updating Manager Contract # Single-pool and Multi-pool Swaps # In our current implementation, swap function in Manager contract supports only single-pool swaps and takes pool address in parameters:</description></item><item><title>User Interface</title><link>https://uniswapv3book.com/docs/milestone_4/user-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_4/user-interface/</guid><description>User Interface # After introducing swap paths, we can significantly simplify the internal of our web app. First of all, every swap now uses a path since path doesn&amp;rsquo;t have to contain multiple pools. Second, it&amp;rsquo;s now easier to change the direction of swap: we can simply reverse the path. And, thanks to the unified pool address generation via CREATE2 and unique salts, we no longer need to store pool addresses and care about tokens order.</description></item><item><title>Tick Rounding</title><link>https://uniswapv3book.com/docs/milestone_4/tick-rounding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_4/tick-rounding/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] Tick Rounding # Let&amp;rsquo;s review some other changes we need to make to support different tick spacings.</description></item></channel></rss>