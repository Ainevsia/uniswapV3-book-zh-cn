<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milestone 5. Fees and Price Oracle on Uniswap V3 Book 中文版</title><link>https://uniswapv3book.com/docs/milestone_5/</link><description>Recent content in Milestone 5. Fees and Price Oracle on Uniswap V3 Book 中文版</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://uniswapv3book.com/docs/milestone_5/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://uniswapv3book.com/docs/milestone_5/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_5/introduction/</guid><description>Fees and Price Oracle # In this milestone, we&amp;rsquo;re going to add two new features to our Uniswap implementation. They share one similarity: they work on top of what we have already built–that&amp;rsquo;s why we&amp;rsquo;ve delayed them until this milestone. However, they&amp;rsquo;re not equally important.
We&amp;rsquo;re going to add swap fees and a price oracle:
Swap fees is a crucial mechanism of the DEX design we&amp;rsquo;re implementing. They&amp;rsquo;re the glue that makes things stick together.</description></item><item><title>Swap Fees</title><link>https://uniswapv3book.com/docs/milestone_5/swap-fees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_5/swap-fees/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] Swap Fees # As a mentioned in the introduction, swap fees is a core mechanism of Uniswap. Liquidity providers need to get paid for the liquidity they provide, otherwise they&amp;rsquo;ll just use it somewhere else.</description></item><item><title>Flash Loan Fees</title><link>https://uniswapv3book.com/docs/milestone_5/flash-loan-fees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_5/flash-loan-fees/</guid><description>Flash Loan Fees # In a previous chapter we implemented flash loans and made them free. However, Uniswap collect swap fees on flash loans, and we&amp;rsquo;re going to add this to our implementation–the amounts repaid by flash loan borrowers must including the fee.
Here&amp;rsquo;s what the updated flash function looks like:
function flash( uint256 amount0, uint256 amount1, bytes calldata data ) public { uint256 fee0 = Math.</description></item><item><title>Protocol Fees</title><link>https://uniswapv3book.com/docs/milestone_5/protocol-fees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_5/protocol-fees/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] Protocol Fees # While working on the Uniswap implementation, you&amp;rsquo;ve probably asked yourself, &amp;ldquo;How does Uniswap make money?</description></item><item><title>Price Oracle</title><link>https://uniswapv3book.com/docs/milestone_5/price-oracle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_5/price-oracle/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] Price Oracle # The final mechanism we&amp;rsquo;re going to add to our DEX is a price oracle. Even though it&amp;rsquo;s not essential to a DEX (there are DEXes that don&amp;rsquo;t implement a price oracle), it&amp;rsquo;s still an important feature of Uniswap and something that&amp;rsquo;s interesting to learn about.</description></item><item><title>User Interface</title><link>https://uniswapv3book.com/docs/milestone_5/user-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_5/user-interface/</guid><description>User Interface # In this milestone, we&amp;rsquo;ve added the ability to remove liquidity from a pool and collect accumulated fees. Thus, we need to reflect these changes in the user interface to allow users to remove liquidity.
Fetching Positions # To let user choose how much liquidity to remove, we first need to fetch user&amp;rsquo;s positions from a pool. To makes this easier, we can add a helper function to the Manager contract, which will return user position in a specific pool:</description></item></channel></rss>