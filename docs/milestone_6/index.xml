<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milestone 6: NFT positions on Uniswap V3 Book 中文版</title><link>https://uniswapv3book.com/docs/milestone_6/</link><description>Recent content in Milestone 6: NFT positions on Uniswap V3 Book 中文版</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://uniswapv3book.com/docs/milestone_6/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://uniswapv3book.com/docs/milestone_6/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_6/introduction/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] NFT Positions # This is the cherry on the cake of this book. In this milestone, we&amp;rsquo;re going to learn how Uniswap contract can be extended and integrated into third-party protocols.</description></item><item><title>ERC721 Overview</title><link>https://uniswapv3book.com/docs/milestone_6/erc721-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_6/erc721-overview/</guid><description>ERC721 Overview # Let&amp;rsquo;s begin with an overview of EIP-721, the standard that defines NFT contracts.
ERC721 is a variant of ERC20. The main difference between them is that ERC721 tokens are non-fungible, that is: one token is not identical to another. To distinguish ERC721 tokens, each of them has a unique ID, which is almost always the counter at which a token was minted. ERC721 tokens also have an extended concept of ownership: owner of each token is tracked and stored in the contract.</description></item><item><title>NFT Manager</title><link>https://uniswapv3book.com/docs/milestone_6/nft-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_6/nft-manager/</guid><description>NFT Manager Contract # Obviously, we&amp;rsquo;re not going to add NFT-related functionality to the pool contract–we need a separate contract that will merge NFT and concentrated liquidity. Recall that, while working on our implementation, we built the UniswapV3Manager contract to facilitate interaction with pool contracts (to make some calculations simpler and to enable multi-pool swaps). This contract was a good demonstration of how core Uniswap contracts can be extended. And we&amp;rsquo;re going to push this idea a little bit further.</description></item><item><title>NFT Renderer</title><link>https://uniswapv3book.com/docs/milestone_6/nft-renderer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://uniswapv3book.com/docs/milestone_6/nft-renderer/</guid><description>NFT Renderer # Now we need to build an NFT renderer: a library that will handle calls to tokenURI in the NFT manager contract. It will render JSON metadata and SVG for each minted token. As we discussed earlier, we&amp;rsquo;ll use the data URI syntax, which requires base64 encoding–this means we&amp;rsquo;ll need a base64 encoder in Solidity. But first, let&amp;rsquo;s look at how our tokens will look like.
SVG Template # I built this simplified variation of the Uniswap V3 NFTs:</description></item></channel></rss>